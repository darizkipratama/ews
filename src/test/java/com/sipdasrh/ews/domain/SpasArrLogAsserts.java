package com.sipdasrh.ews.domain;

import static com.sipdasrh.ews.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SpasArrLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpasArrLogAllPropertiesEquals(SpasArrLog expected, SpasArrLog actual) {
        assertSpasArrLogAutoGeneratedPropertiesEquals(expected, actual);
        assertSpasArrLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpasArrLogAllUpdatablePropertiesEquals(SpasArrLog expected, SpasArrLog actual) {
        assertSpasArrLogUpdatableFieldsEquals(expected, actual);
        assertSpasArrLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpasArrLogAutoGeneratedPropertiesEquals(SpasArrLog expected, SpasArrLog actual) {
        assertThat(actual)
            .as("Verify SpasArrLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpasArrLogUpdatableFieldsEquals(SpasArrLog expected, SpasArrLog actual) {
        assertThat(actual)
            .as("Verify SpasArrLog relevant properties")
            .satisfies(a ->
                assertThat(a.getTimeLog()).as("check timeLog").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getTimeLog())
            )
            .satisfies(a ->
                assertThat(a.getTimeRetrieve())
                    .as("check timeRetrieve")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getTimeRetrieve())
            )
            .satisfies(a -> assertThat(a.getLogValue()).as("check logValue").isEqualTo(expected.getLogValue()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpasArrLogUpdatableRelationshipsEquals(SpasArrLog expected, SpasArrLog actual) {
        assertThat(actual)
            .as("Verify SpasArrLog relationships")
            .satisfies(a -> assertThat(a.getSpasArrInstall()).as("check spasArrInstall").isEqualTo(expected.getSpasArrInstall()));
    }
}
